import time

start1 = time.time()

# is_prime(n) is waarschijnlijk de bottleneck van het programma
def prime_sieve(n):
    sieve = [True] * (n//2)
    for i in range(3,int(n**0.5)+1,2):
        if sieve[i//2]:
            sieve[i*i//2::i] = [False] * ((n-i*i-1)//(2*i)+1)
    return [2] + [2*i+1 for i in range(1,n//2) if sieve[i]]

primes_under_1000000 = prime_sieve(1000000)
# string rotatie

def shift_left(n):
    return int(str(n)[1:] + str(n)[:1])


# na elke rotatie wordt er gecontroleerd of de nieuwe n een priemgetal is
# vermijden dat we extra getallen moeten toevoegen en later extra controle moet uitvoeren
# eerst for loop gedaan, elk getal toevoegen in een lijst en dan op het einde kijken of elk getal in de lijst een priemgetal is


def generate_cycles(n):
    count = 0
    while (n in primes_under_1000000) and count < len(str(n)):
        count += 1
        n = shift_left(n)
    return len(str(n)) == count

# loop over integers between 1 and 1 000 000
# none of the digits should be even because they will end up at the end and make the number not prime eventually
# this allows us to disregard a lot of the numbers
# question is: does the complexity of contains_even(n) cause the loop to take longer because of checking over every integer?

def contains_even(n):
    lijst = [int(i) for i in str(n) if int(i) % 2 != 0]
    return len(lijst) != len(str(n))



som = 1 + sum([1 for i in primes_under_1000000 if (not contains_even(i)) and generate_cycles(i) ])  # 2 wordt geskipt dus rekening mee houden door te initialiseren als 1

# er wordt niet gecontroleerd of i een priemgetal is
# toevallig blijkt dat er geen priemgetallen zijn onder 1000000 met enkel oneven digits

print(som)
        
end1 = time.time()

print(end1 - start1)


# antwoord 55 is correct
# duur +- 3,9 seconden om te runnen


